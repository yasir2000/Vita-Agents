name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  packages: read
  security-events: write

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt') }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint bandit safety

    - name: Run Black formatter check
      run: black --check --diff vita_agents/ tests/

    - name: Run isort import sorting check
      run: isort --check-only --diff vita_agents/ tests/

    - name: Run flake8 linting
      run: flake8 vita_agents/ tests/ --max-line-length=100 --ignore=E203,W503

    - name: Run mypy type checking
      run: |
        pip install types-requests types-PyYAML
        mypy vita_agents/ --ignore-missing-imports

    - name: Run pylint
      run: pylint vita_agents/ --disable=C0114,C0115,C0116 --max-line-length=100

    - name: Run bandit security linting
      run: bandit -r vita_agents/ -ll

    - name: Run safety check
      run: safety check

  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix for efficiency - test all Python versions on Ubuntu, latest Python on others
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vita_agents_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-asyncio pytest-xdist pytest-timeout

    - name: Set up environment variables (Ubuntu/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "VITA_DB_URL=postgresql://postgres:postgres@localhost:5432/vita_agents_test" >> $GITHUB_ENV
        echo "VITA_REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "VITA_SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "VITA_ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Set up environment variables (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "VITA_DB_URL=postgresql://postgres:postgres@localhost:5432/vita_agents_test" >> $env:GITHUB_ENV
        echo "VITA_REDIS_URL=redis://localhost:6379/0" >> $env:GITHUB_ENV
        echo "VITA_SECRET_KEY=test-secret-key-for-github-actions" >> $env:GITHUB_ENV
        echo "VITA_ENVIRONMENT=testing" >> $env:GITHUB_ENV

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=vita_agents --cov-report=xml --cov-report=html --timeout=300

    - name: Run integration tests
      if: matrix.os == 'ubuntu-latest'  # Only run integration tests on Ubuntu to save resources
      run: |
        pytest tests/integration/ -v --timeout=600

    - name: Run FHIR engines tests
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'  # Only run on one configuration
      run: |
        pytest tests/fhir_engines/ -v --timeout=600

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep pip-audit

    - name: Run Bandit security scan
      run: |
        bandit -r vita_agents/ -f json -o bandit-report.json
        bandit -r vita_agents/

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: vita-agents:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm vita-agents:test python -c "import vita_agents; print('Import successful')"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vita_agents_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark locust

    - name: Set up environment
      run: |
        echo "VITA_DB_URL=postgresql://postgres:postgres@localhost:5432/vita_agents_perf" >> $GITHUB_ENV
        echo "VITA_ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ --benchmark-json=benchmark-results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        fhir-version: ['R4', 'R5']
        hl7-version: ['2.5', '2.6', '2.8']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vita_agents_compat
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Set up environment
      run: |
        echo "VITA_DB_URL=postgresql://postgres:postgres@localhost:5432/vita_agents_compat" >> $GITHUB_ENV
        echo "VITA_FHIR_VERSION=${{ matrix.fhir-version }}" >> $GITHUB_ENV
        echo "VITA_HL7_VERSION=${{ matrix.hl7-version }}" >> $GITHUB_ENV
        echo "VITA_ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Run compatibility tests
      run: |
        pytest tests/compatibility/ -v --timeout=300 \
          -k "fhir_${{ matrix.fhir-version }}_hl7_${{ matrix.hl7-version }}"

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin sphinx sphinx-rtd-theme

    - name: Build MkDocs documentation
      run: |
        mkdocs build --strict

    - name: Build Sphinx documentation
      run: |
        cd docs/
        make html

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          site/
          docs/_build/html/

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: failure()
    
    steps:
    - name: Notify Discord on failure
      run: |
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "❌ CI/CD Pipeline Failed",
              "description": "The CI/CD pipeline has failed for Vita Agents",
              "color": 15158332,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "${{ github.sha }}",
                  "inline": true
                },
                {
                  "name": "Action",
                  "value": "[View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }]
          }' || echo "Discord notification failed"

  notify-success:
    name: Notify on Success
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Discord on success
      run: |
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "✅ CI/CD Pipeline Passed",
              "description": "All tests passed for Vita Agents main branch",
              "color": 5814783,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "${{ github.sha }}",
                  "inline": true
                },
                {
                  "name": "Action",
                  "value": "[View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'"
            }]
          }' || echo "Discord notification failed"