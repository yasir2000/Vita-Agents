apiVersion: v1
kind: Namespace
metadata:
  name: vita-agents
  labels:
    name: vita-agents
---
apiVersion: v1
kind: Secret
metadata:
  name: vita-agents-secrets
  namespace: vita-agents
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded secrets in production
  postgres-password: dml0YV9hcHBfcGFzc3dvcmQ=  # vita_app_password
  jwt-secret: dml0YS1qd3Qtc2VjcmV0LWtleQ==  # vita-jwt-secret-key
  redis-password: dml0YS1yZWRpcy1wYXNzd29yZA==  # vita-redis-password
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vita-agents-config
  namespace: vita-agents
data:
  postgres-host: postgres-service
  postgres-port: "5432"
  postgres-db: vita_agents
  redis-host: redis-service
  redis-port: "6379"
  log-level: "INFO"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: vita-agents
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: vita-agents
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: vita-agents
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: postgres-db
        - name: POSTGRES_USER
          value: vita_app
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vita-agents-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vita_app
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vita_app
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: vita-agents
data:
  init-db.sql: |
    -- Initialize Vita Agents Database
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS agents;
    CREATE SCHEMA IF NOT EXISTS workflows;
    CREATE SCHEMA IF NOT EXISTS audit;

    -- Agents table
    CREATE TABLE IF NOT EXISTS agents.agent_instances (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        type VARCHAR(100) NOT NULL,
        status VARCHAR(50) NOT NULL,
        config JSONB,
        capabilities JSONB,
        metrics JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Tasks table
    CREATE TABLE IF NOT EXISTS agents.tasks (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        task_id VARCHAR(255) UNIQUE NOT NULL,
        agent_id VARCHAR(255) NOT NULL,
        task_type VARCHAR(100) NOT NULL,
        parameters JSONB,
        status VARCHAR(50) NOT NULL,
        result JSONB,
        error_message TEXT,
        execution_time_ms INTEGER,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        completed_at TIMESTAMP WITH TIME ZONE,
        FOREIGN KEY (agent_id) REFERENCES agents.agent_instances(agent_id)
    );

    -- Workflows table
    CREATE TABLE IF NOT EXISTS workflows.definitions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        workflow_id VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        steps JSONB NOT NULL,
        metadata JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Workflow executions table
    CREATE TABLE IF NOT EXISTS workflows.executions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        execution_id VARCHAR(255) UNIQUE NOT NULL,
        workflow_id VARCHAR(255) NOT NULL,
        status VARCHAR(50) NOT NULL,
        input_data JSONB,
        step_results JSONB,
        current_step VARCHAR(255),
        error_message TEXT,
        started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        completed_at TIMESTAMP WITH TIME ZONE,
        FOREIGN KEY (workflow_id) REFERENCES workflows.definitions(workflow_id)
    );

    -- Audit logs table
    CREATE TABLE IF NOT EXISTS audit.logs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255),
        action VARCHAR(100) NOT NULL,
        data_type VARCHAR(100),
        details JSONB,
        user_id VARCHAR(255),
        ip_address INET,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        FOREIGN KEY (agent_id) REFERENCES agents.agent_instances(agent_id)
    );

    -- Healthcare data processing logs (HIPAA compliance)
    CREATE TABLE IF NOT EXISTS audit.healthcare_logs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255),
        action VARCHAR(100) NOT NULL,
        resource_type VARCHAR(100),
        resource_id VARCHAR(255),
        patient_id VARCHAR(255), -- Encrypted or hashed
        access_reason VARCHAR(255),
        compliance_flags JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        FOREIGN KEY (agent_id) REFERENCES agents.agent_instances(agent_id)
    );

    -- Indexes for performance
    CREATE INDEX IF NOT EXISTS idx_tasks_agent_id ON agents.tasks(agent_id);
    CREATE INDEX IF NOT EXISTS idx_tasks_status ON agents.tasks(status);
    CREATE INDEX IF NOT EXISTS idx_tasks_created_at ON agents.tasks(created_at);
    CREATE INDEX IF NOT EXISTS idx_executions_workflow_id ON workflows.executions(workflow_id);
    CREATE INDEX IF NOT EXISTS idx_executions_status ON workflows.executions(status);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_agent_id ON audit.logs(agent_id);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit.logs(created_at);
    CREATE INDEX IF NOT EXISTS idx_healthcare_logs_patient_id ON audit.healthcare_logs(patient_id);
    CREATE INDEX IF NOT EXISTS idx_healthcare_logs_created_at ON audit.healthcare_logs(created_at);
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: vita-agents
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: vita-agents
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vita-agents-secrets
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: vita-agents
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vita-agents-backend
  namespace: vita-agents
spec:
  replicas: 3
  selector:
    matchLabels:
      app: vita-agents-backend
  template:
    metadata:
      labels:
        app: vita-agents-backend
    spec:
      containers:
      - name: vita-agents-backend
        image: vita-agents/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: "postgresql://vita_app:$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/0"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: vita-agents-secrets
              key: jwt-secret
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: postgres-host
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: postgres-port
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: postgres-db
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vita-agents-secrets
              key: postgres-password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: redis-port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: vita-agents-secrets
              key: redis-password
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: vita-agents-config
              key: log-level
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: vita-agents-backend-service
  namespace: vita-agents
spec:
  selector:
    app: vita-agents-backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vita-agents-frontend
  namespace: vita-agents
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vita-agents-frontend
  template:
    metadata:
      labels:
        app: vita-agents-frontend
    spec:
      containers:
      - name: vita-agents-frontend
        image: vita-agents/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "http://vita-agents-backend-service:8000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: vita-agents-frontend-service
  namespace: vita-agents
spec:
  selector:
    app: vita-agents-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vita-agents-ingress
  namespace: vita-agents
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - vita-agents.yourdomain.com
    - api.vita-agents.yourdomain.com
    secretName: vita-agents-tls
  rules:
  - host: vita-agents.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vita-agents-frontend-service
            port:
              number: 3000
  - host: api.vita-agents.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vita-agents-backend-service
            port:
              number: 8000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vita-agents-backend-hpa
  namespace: vita-agents
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vita-agents-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vita-agents-frontend-hpa
  namespace: vita-agents
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vita-agents-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70